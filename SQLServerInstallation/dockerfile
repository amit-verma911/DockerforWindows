# Dockerfile to install IIS and .net framework with windows server core -2019. 
###Base Image###
#indicates that the windowsservercore image will be used as the base image.
#FROM mcr.microsoft.com/windows/servercore:ltsc2019
#updated to use maersk approved windows server core image

FROM mcr.microsoft.com/windows/servercore:ltsc2019

#Metadate indicating image maintainer
LABEL maintainer="Amit Verma"

# Team ownership
LABEL brand="Abc"
LABEL product.name="Some Product"
LABEL product.team="Some Team"

###Add .net Framework###
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop';"]

#add binaries - download binaries from blob storage
RUN mkdir c:\sqlscript
#RUN mkdir c:\sqlbinaries
#RUN mkdir c:\configfile

#copy scripts 
COPY ./scripts/sql_server_installation.ps1 /
COPY ./scripts/azscript.ps1 /
#COPY ./scripts/blobdownload.ps1 /

#COPY ./binaries/ /c:/sqlbinaries/
COPY ./config/ /C:/ITSOE/Build/

WORKDIR C:/

#RUN powershell -command \
#    Install-PackageProvider -Name NuGet -Force;
#RUN powershell -command \    
#    Install-Module -Name Az -AllowClobber -Scope AllUsers -Force ;
#RUN Powershell -Command Import-Module AzureRM ;


RUN ./azscript.ps1
#RUN ./blobdownload.ps1

RUN mkdir sqlserverinstalltionalfiles \
    tar -zxf 'sqlserverinstalltionalfiles.zip' sqlserverinstalltionalfiles -F:* \
    ;

#run scripts
RUN powershell -command \
    Add-WindowsFeature RSAT-AD-PowerShell;

#RUN powershell -command \
#    Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools;

#RUN powershell.exe -command "\
#    Install-ADDSForest -DomainName "example.com" \
#    -SafeModeAdministratorPassword (ConvertTo-SecureString"P@ssW0rD!" -AsPlainText -Force) \
#    -CreateDnsDelegation:$false -DatabasePath "C:\Windows\NTDS" \
#    -DomainMode "7" -DomainNetbiosName "example" -ForestMode "7" \
#    -InstallDns:$true -LogPath "C:\Windows\NTDS" \
#    -NoRebootOnCompletion:$True -SysvolPath "C:\Windows\SYSVOL" -Force:$true;"

#RUN powershell -command \ 
#    Set-ExecutionPolicy RemoteSigned;
#RUN powershell -command \ 
#    New-ADServiceAccount -Name "gMSA-sqladmin" -RestrictToSingleComputer;
#RUN powershell -command \
#    Add-ADComputerServiceAccount -Identity Testvm -ServiceAccount"gMSA-sqladmin";
#RUN powershell -command \
#    Install-ADServiceAccount -Identity "gMSA-sqladmin";
#RUN powershell -command \
#    Add-KdsRootKey -EffectiveImmediately;
#RUN powershell -command \
#    Add-KdsRootKey -EffectiveTime ((get-date).addhours(-10));
#RUN powershell -command \ 
#    Install-Module -Name SqlServer;


#run installation scripts 
WORKDIR C:/
RUN ./sql_server_installation.ps1

#copy web apps to container wwwroot

#COPY ./WebApp1 /inetpub/wwwroot 
#COPY ./WebApp2 /inetpub/wwwroot 

#added argument for passing the version
#ARG Version

#Instal .net framework with version
#RUN Install-WindowsFeature NET-Framework-$env:Version-ASPNET ; \
#    Install-WindowsFeature Web-Asp-Net$env:Version 

#RUN Install-WindowsFeature NET-Framework-45-ASPNET ; \
#    Install-WindowsFeature Web-Asp-Net45


###Add IIS###
RUN powershell -command \
    Add-WindowsFeature Web-Server; 

#adding tls to website
RUN powershell.exe -Command " \
    Import-Module IISAdministration; \
    $cert = New-SelfSignedCertificate -DnsName demo.google.com -CertStoreLocation cert:\LocalMachine\My; \
    $certHash = $cert.GetCertHash(); \
    $sm = Get-IISServerManager; \
    $sm.Sites[\"Default Web Site\"].Bindings.Add(\"*:443:\", $certHash, \"My\", \"0\"); \
    $sm.CommitChanges();"

#specify a command to run on coantainer setup
CMD [ "cmd" ]
